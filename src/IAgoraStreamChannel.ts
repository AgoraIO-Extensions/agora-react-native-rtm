import { PublishOptions, UserList } from './AgoraRtmBase';

/// Generated by terra, DO NOT MODIFY BY HAND.

/**
 * The qos of rtm message.
 */
export enum RTM_MESSAGE_QOS {
  RTM_MESSAGE_QOS_UNORDERED = 0,
  RTM_MESSAGE_QOS_ORDERED = 1,
}

/**
 * The priority of rtm message.
 */
export enum RTM_MESSAGE_PRIORITY {
  RTM_MESSAGE_PRIORITY_HIGHEST = 0,
  RTM_MESSAGE_PRIORITY_HIGH = 1,
  RTM_MESSAGE_PRIORITY_NORMAL = 4,
  RTM_MESSAGE_PRIORITY_LOW = 8,
}

/**
 * Join channel options.
 */
export class JoinChannelOptions {
  token?: string;
  withMetadata?: boolean = false;
  withPresence?: boolean = true;
  withLock?: boolean = false;
  constructor(
    props?: Partial<{
      token?: string;
      withMetadata?: boolean;
      withPresence?: boolean;
      withLock?: boolean;
    }>
  ) {
    Object.assign(this, props);
  }
}

/**
 * Join topic options.
 */
export class JoinTopicOptions {
  qos?: RTM_MESSAGE_QOS = RTM_MESSAGE_QOS.RTM_MESSAGE_QOS_UNORDERED;
  priority?: RTM_MESSAGE_PRIORITY =
    RTM_MESSAGE_PRIORITY.RTM_MESSAGE_PRIORITY_NORMAL;
  meta?: string;
  syncWithMedia?: boolean;
  constructor(
    props?: Partial<{
      qos?: RTM_MESSAGE_QOS;
      priority?: RTM_MESSAGE_PRIORITY;
      meta?: string;
      syncWithMedia?: boolean;
    }>
  ) {
    Object.assign(this, props);
  }
}

/**
 * Topic options.
 */
export class TopicOptions {
  users?: string[];
  userCount?: number = 0;
  constructor(
    props?: Partial<{
      users?: string[];
      userCount?: number;
    }>
  ) {
    Object.assign(this, props);
  }
}

/**
 * The IStreamChannel class.
 *
 * This class provides the stream channel methods that can be invoked by your app.
 */
export abstract class IStreamChannel {
  abstract join(options: JoinChannelOptions, requestId?: number): number;
  abstract renewToken(token: string): number;
  abstract leave(requestId?: number): number;
  abstract getChannelName(): string;
  abstract joinTopic(
    topic: string,
    options: JoinTopicOptions,
    requestId?: number
  ): number;
  abstract publishTopicMessage(
    topic: string,
    message: string,
    length: number,
    option: PublishOptions
  ): number;
  abstract leaveTopic(topic: string, requestId?: number): number;
  abstract subscribeTopic(
    topic: string,
    options?: TopicOptions,
    requestId?: number
  ): number;
  abstract unsubscribeTopic(topic: string, options?: TopicOptions): number;
  abstract getSubscribedUserList(topic: string, users: UserList[]): number;
  abstract release(): number;
  abstract publishTopicMessageWithBuffer(
    topic: string,
    message: Uint8Array,
    length: number,
    option: PublishOptions
  ): number;
}
