/// Generated by terra, DO NOT MODIFY BY HAND.

export enum PEER_MESSAGE_STATE {
  PEER_MESSAGE_INIT = 0,
  PEER_MESSAGE_FAILURE = 1,
  PEER_MESSAGE_PEER_UNREACHABLE = 2,
  PEER_MESSAGE_RECEIVED_BY_PEER = 3,
  PEER_MESSAGE_SENT_TIMEOUT = 4,
}

/**
 * The login error code.
 */
export enum LOGIN_ERR_CODE {
  /**
   * 0: Login succeeds. No error occurs.
   */
  LOGIN_ERR_OK = 0,
  /**
   * 1: Login fails for reasons unknown.
   */
  LOGIN_ERR_UNKNOWN = 1,
  /**
   * 2: The server rejects the login, either because the user has already logged in, or because
   * the RTM service is not initialized.
   */
  LOGIN_ERR_REJECTED = 2,
  /**
   * 3: Invalid login arguments.
   */
  LOGIN_ERR_INVALID_ARGUMENT = 3,
  /**
   * 4: The App ID is invalid.
   */
  LOGIN_ERR_INVALID_APP_ID = 4,
  /**
   * 5: The token is invalid.
   */
  LOGIN_ERR_INVALID_TOKEN = 5,
  /**
   * 6: The login is rejected because the token has expired.
   */
  LOGIN_ERR_TOKEN_EXPIRED = 6,
  /**
   * 7: Authentication of the RTMP token fails.
   */
  LOGIN_ERR_NOT_AUTHORIZED = 7,
  /**
   * 8: The login times out. The current timeout is set as six seconds.
   */
  LOGIN_ERR_TIMEOUT = 8,
}

/**
 * The logout error code.
 */
export enum LOGOUT_ERR_CODE {
  /**
   * 0: Logout succeeds. No error occurs.
   */
  LOGOUT_ERR_OK = 0,
  /**
   * 1: Logout fails.
   */
  LOGOUT_ERR_REJECTED = 1,
}

/**
 * The connection state.
 */
export enum CONNECTION_STATE {
  /**
   * 1: The SDK has logged in the RTM service.
   */
  CONNECTION_STATE_CONNECTED = 1,
  /**
   * 2: The initial state. The SDK is disconnected from the RTM service.
   */
  CONNECTION_STATE_DISCONNECTED = 2,
  /**
   * 3: The SDK gives up logging in the RTM service, mainly because another instance has logged in the RTM
   * service with the same user ID.
   *
   * Call the logout() method before calling login to log in the RTM service again.
   */
  CONNECTION_STATE_ABORTED = 3,
}

/**
 * The state of the channel message.
 */
export enum CHANNEL_MESSAGE_STATE {
  /**
   * 1: The channel message is received by the server.
   */
  CHANNEL_MESSAGE_RECEIVED_BY_SERVER = 1,
  /**
   * 3: The SDK has not received a response from the server in five seconds. The current timeout is set as
   * five seconds.
   */
  CHANNEL_MESSAGE_SENT_TIMEOUT = 3,
}

/**
 * The join channel error.
 */
export enum JOIN_CHANNEL_ERR {
  /**
   * 0: The method call succeeds, or the user joins the channel successfully.
   */
  JOIN_CHANNEL_ERR_OK = 0,
  /**
   * 1: Common failure. The user fails to join the channel.
   */
  JOIN_CHANNEL_ERR_FAILURE = 1,
  /**
   * 2: **RESERVED FOR FUTURE USE**
   */
  JOIN_CHANNEL_ERR_REJECTED = 2,
  /**
   * 3: The user fails to join the channel because the argument is invalid.
   */
  JOIN_CHANNEL_ERR_INVALID_ARGUMENT = 3,
  /**
   * 4: A timeout occurs when joining the channel. The current timeout is set as five seconds. Possible reasons: The user is in the \ref agora::rtm::CONNECTION_STATE_ABORTED "CONNECTION_STATE_ABORTED" state.
   */
  JOIN_CHANNEL_TIMEOUT = 4,
  /**
   * 5: The number of the RTM channels you are in exceeds the limit of 20.
   */
  JOIN_CHANNEL_ERR_EXCEED_LIMIT = 5,
  /**
   * 6: The user is joining or has joined the channel.
   */
  JOIN_CHANNEL_ERR_ALREADY_JOINED = 6,
  /**
   * 7: The method call frequency exceeds 50 queries every three seconds.
   */
  JOIN_CHANNEL_ERR_TOO_OFTEN = 7,
  /**
   * 8: The frequency of joining the same channel exceeds two times every five seconds.
   */
  JOIN_CHANNEL_ERR_JOIN_SAME_CHANNEL_TOO_OFTEN = 8,
  /**
   * 101: \ref agora::rtm::IRtmService "IRtmService" is not initialized.
   */
  JOIN_CHANNEL_ERR_NOT_INITIALIZED = 101,
  /**
   * 102: The user does not call the \ref agora::rtm::IRtmService::login "login" method, or the method call of \ref agora::rtm::IRtmService::login "login" does not succeed before joining the channel.
   */
  JOIN_CHANNEL_ERR_USER_NOT_LOGGED_IN = 102,
}

/**
 * @brief Error codes related to leaving a channel.
 */
export enum LEAVE_CHANNEL_ERR {
  /**
   * 0: The method call succeeds, or the user leaves the channel successfully.
   */
  LEAVE_CHANNEL_ERR_OK = 0,
  /**
   * 1: Common failure. The user fails to leave the channel.
   */
  LEAVE_CHANNEL_ERR_FAILURE = 1,
  /**
   * 2: **RESERVED FOR FUTURE USE**
   */
  LEAVE_CHANNEL_ERR_REJECTED = 2,
  /**
   * 3: The user is not in the channel.
   */
  LEAVE_CHANNEL_ERR_NOT_IN_CHANNEL = 3,
  /**
   * 101: \ref agora::rtm::IRtmService "IRtmService" is not initialized.
   */
  LEAVE_CHANNEL_ERR_NOT_INITIALIZED = 101,
  /**
   * 102: The user does not call the \ref agora::rtm::IRtmService::login "login" method, or the method call of \ref agora::rtm::IRtmService::login "login" does not succeed before calling the \ref agora::rtm::IChannel::leave "leave" method.
   */
  LEAVE_CHANNEL_ERR_USER_NOT_LOGGED_IN = 102,
}

/**
 * The reason for a user to leave the channel.
 */
export enum LEAVE_CHANNEL_REASON {
  /**
   * 1: The user quits the channel.
   */
  LEAVE_CHANNEL_REASON_QUIT = 1,
  /**
   * 2: The user is kicked off the channel.
   */
  LEAVE_CHANNEL_REASON_KICKED = 2,
}

/**
 * @brief Error codes related to sending a channel message.
 */
export enum CHANNEL_MESSAGE_ERR_CODE {
  /**
   * 0: The method call succeeds, or the server receives the channel message.
   */
  CHANNEL_MESSAGE_ERR_OK = 0,
  /**
   * 1: Common failure. The user fails to send the channel message.
   */
  CHANNEL_MESSAGE_ERR_FAILURE = 1,
  /**
   * 2: The SDK does not receive a response from the server in 10 seconds. The current timeout is set as 10 seconds. Possible reasons: The user is in the \ref agora::rtm::CONNECTION_STATE_ABORTED "CONNECTION_STATE_ABORTED" state.
   */
  CHANNEL_MESSAGE_ERR_SENT_TIMEOUT = 2,
  /**
   * 3: The method call frequency exceeds the limit of (RTM SDK for Windows C++) 180 calls every three seconds or (RTM SDK for Linux C++) 1500 calls every three seconds, with channel and peer messages taken together..
   */
  CHANNEL_MESSAGE_ERR_TOO_OFTEN = 3,
  /**
   * 4: The message is null or exceeds 32 KB in length.
   */
  CHANNEL_MESSAGE_ERR_INVALID_MESSAGE = 4,
  /**
   * 101: \ref agora::rtm::IRtmService "IRtmService" is not initialized.
   */
  CHANNEL_MESSAGE_ERR_NOT_INITIALIZED = 101,
  /**
   * 102: The user does not call the \ref agora::rtm::IRtmService::login "login" method, or the method call of \ref agora::rtm::IRtmService::login "login" does not succeed before sending out a channel message.
   */
  CHANNEL_MESSAGE_ERR_USER_NOT_LOGGED_IN = 102,
}

/**
 * The response code.
 */
export enum RESPONSE_CODE {
  /**
   * 1: The response
   */
  RESPONSE_CODE_SUCCESS = 1,
  RESPONSE_CODE_FAILURE = 2,
}

/**
 * The message type.
 */
export enum MESSAGE_TYPE {
  /**
   * 0: The message type is undefined.
   */
  MESSAGE_TYPE_UNDEFINED = 0,
  /**
   * 1: A text message.
   */
  MESSAGE_TYPE_TEXT = 1,
  /**
   * 2: A raw message in binary, for example, audio data, or video data.
   */
  MESSAGE_TYPE_BINARY = 2,
  /**
   * 4: A converge message.
   */
  MESSAGE_TYPE_CONVERGE = 4,
}

/**
 * The IMessage class.
 */
export abstract class IMessage {
  /**
   * Gets the ID of the message.
   * @return The ID of the current IMessage instance.
   */
  abstract getMessageId(): number;
  /**
   * Gets the message type.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract getMessageType(): number;
  /**
   * Sets the content of the text message, or the text description of the raw message.
   * @param str The content of the text message, or the text description of the raw message. The maximum length
   * is 32 KB.
   */
  abstract setText(str: string): void;
  /**
   * Gets the content of the text messsage, or the text description of the raw message.
   * @return
   * - The content of the text message or the text description of the raw message.
   */
  abstract getText(): string;
  /**
   * Get pointer of custom raw message
   * @return
   * - The content of binary raw message
   */
  abstract getRawMessageData(): Uint8Array;
  /**
   * Get length of custom raw message
   * @return
   * - The length of binary raw message in bytes
   */
  abstract getRawMessageLength(): number;
  /**
   * Set message type
   */
  abstract setMessageType(type: number): void;
  /**
   * Set raw binary message
   */
  abstract setRawMessage(data: Uint8Array, length: number): void;
  /**
   * Releases the IMessage instance.
   */
  abstract release(): void;
}

/**
 * The IChannelMember class.
 */
export abstract class IChannelMember {
  /**
   * Gets the ID of the channel member.
   * @return The ID of the channel member.
   */
  abstract getMemberId(): string;
  /**
   * Gets the ID of the channel.
   * @return The ID of the channel.
   */
  abstract getChannelId(): string;
  /**
   * Releases the IChannelMember class.
   */
  abstract release(): void;
}

/**
 * The IChannelAttributes class.
 */
export abstract class IChannelAttributes {
  /**
   * Adds an attribute to a specified channel.
   *
   * @param key The pointer to the attribute key.
   * @param value The pointer to the attribute value.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract addAttribute(key: string, value: string): number;
  /**
   * Removes an attribute from the channel.
   * @param key The pointer to the attribute key.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract removeAttribute(key: string): number;
  /**
   * Gets the size of the attributes.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract getAttributesSize(): number;
  /**
   * Gets the channel attributes.
   * @param size The size of the channel attributes.
   * @param key The pointer to the key of each channel attribute.
   * @param value The pointer to the value of each channel attribute.
   */
  abstract getAttributes(size: number, key: string, value: string): void;
  /**
   * Gets the value of a channel attribute using the attribute key.
   * @param key The pointer to the key of the channel attribute that you want to get.
   */
  abstract getAttributeValue(key: string): string;
  /**
   * Releases the IChannelAttributes instance.
   * @param
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract release(): number;
}

/**
 * The IChannelEventHandler class.
 */
export interface IChannelEventHandler {
  /**
   * Occurs when the local user successfully joins a channel.
   */
  onJoinSuccess?(): void;
  /**
   * Occurs when the local user fails to join a channel.
   * @param errorCode The error code: #JOIN_CHANNEL_ERR.
   */
  onJoinFailure?(errorCode: JOIN_CHANNEL_ERR): void;
  /**
   * Occurs when the local user leaves a channel.
   * @param errorCode The error code. See #LEAVE_CHANNEL_ERR.
   */
  onLeave?(errorCode: LEAVE_CHANNEL_ERR): void;
  /**
   * Occurs when the local user receives a channel message.
   * @param message The pointer to the messsage: IMessage.
   */
  onMessageReceived?(userId: string, message: IMessage): void;
  /**
   * Reports the state of the message sent by the local user.
   * @param messageId ID of the message.
   * @param state The state of the message: #CHANNEL_MESSAGE_STATE.
   */
  onSendMessageState?(messageId: number, state: CHANNEL_MESSAGE_STATE): void;
  /**
   * Returns the result of the \ref agora::rtm::IChannel::sendMessage "sendMessage" method call.
   *
   *  @param messageId The ID of the sent channel message.
   *  @param state The error codes. See #CHANNEL_MESSAGE_ERR_CODE.
   */
  onSendMessageResult?(
    messageId: number,
    state: CHANNEL_MESSAGE_ERR_CODE
  ): void;
  /**
   * Occurs when another member joins the channel.
   * @param member The pointer to the member who joins the channel: IChannelMember.
   */
  onMemberJoined?(member: IChannelMember): void;
  /**
   * Occurs when the other member leaves the channel.
   * @param member The pointer to the member who leaves the channel: IChannelMember.
   */
  onMemberLeft?(member: IChannelMember): void;
  /**
   * Reports all the members in the channel.
   * @param members The pointer to each member in the channel: IChannelMember.
   * @param userCount The number of users in the channel.
   */
  onMembersGotten?(members: IChannelMember[], userCount: number): void;
  /**
   * Occurs when the channel attributes are updated.
   * @param attributes The pointer to the current channel attributes: IChannelAttributes.
   */
  onAttributesUpdated?(attributes: IChannelAttributes[]): void;
  /**
   * Occurs when the local user calls updateAttributes().
   * @param requestId ID of the current attribute update request.
   * @param resCode The response code: #RESPONSE_CODE.
   */
  onUpdateAttributesResponse?(requestId: number, resCode: RESPONSE_CODE): void;
  /**
   * Occurs when the channel attributes are deleted.
   * @param attributes The pointer to the channel attributes that you want to remove: IChannelAttributes.
   */
  onAttributesDeleted?(attributes: IChannelAttributes[]): void;
  /**
   * Occurs when the local user calls deleteAttributes().
   * @param requestId ID of the current attribute delete request.
   * @param resCode The response code: #RESPONSE_CODE.
   */
  onDeleteAttributesResponse?(requestId: number, resCode: RESPONSE_CODE): void;
}

/**
 * The IChannel class.
 */
export abstract class IChannel {
  /**
   * Sets an event handler for IChannel.
   * @param eventHandler The pointer to the event handler of IChannel: IChannelEventHandler.
   */
  abstract setEventHandler(eventHandler: IChannelEventHandler): void;
  /**
   * Joins the current channel.
   *
   * A successful method call triggers either onJoinSuccess() or onJoinFailure() on the local client, to report
   * the state of joining the channel.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract join(): number;
  /**
   * Leaves the current channel.
   *
   * After the local user successfully leaves the channel, the SDK triggers the onLeave() on the local client.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract leave(): number;
  /**
   * Sends a channel message.
   *
   * After you successfully send a channel message, all members in the channel receive the message in the
   * onMessageReceived() callback.
   * @param message The pointer to the channel message that you want to send: IMessage.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract sendMessage(message: IMessage): number;
  /**
   * Updates the channel attributes.
   *
   * A successful method call triggers the onUpdateAttributesResponse() callback on the local client.
   * @param attributes The pointer to the channel attributes that you want to update: IChannelAttributes.
   * @param requestId ID of the current update request.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract updateAttributes(
    attributes: IChannelAttributes[],
    requestId?: number
  ): number;
  /**
   * Removes the channel attributes.
   *
   * A successful method call triggers the onDeleteAttributesResponse() callback on the local client.
   * @param attributes The pointer to the channel attributes that you want to remove: IChannelAttributes.
   * @param requestId ID of the current delete request.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract deleteAttributes(
    attributes: IChannelAttributes[],
    requestId?: number
  ): number;
  /**
   * Gets the current request ID.
   * @return
   * - The pointer to the request ID, if the method call succeeds.
   * - An empty pointer NULL, if the method call fails.
   */
  abstract getId(): string;
  /**
   * Releases the IChannel instance.
   *
   * This is a synchronous method call, which means that the SDK reports the result of this method call
   * after the IChannel instance is successfully released.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract release(): number;
}

/**
 * The IRtmServiceEventHandler class.
 */
export interface IRtmServiceEventHandler {
  /**
   * Occurs when the user successfully logs in the RTM service.
   */
  onLoginSuccess?(): void;
  /**
   * Occurs when the user fails to log in the RTM service.
   * @param errorCode The reason for the login failure: #LOGIN_ERR_CODE.
   */
  onLoginFailure?(errorCode: LOGIN_ERR_CODE): void;
  /**
   * Occurs when the user successfully logs out of the RTM service.
   */
  onLogout?(): void;
  /**
   * Occurs when the connection state of the local user has changed.
   * @param state The current connection state: #CONNECTION_STATE.
   */
  onConnectionStateChanged?(state: CONNECTION_STATE): void;
  /**
   * Reports the state of sending a message.
   * @param messageId ID of the message.
   * @param state The current state of the message: #PEER_MESSAGE_STATE.
   */
  onSendMessageState?(messageId: number, state: PEER_MESSAGE_STATE): void;
  /**
   * Occurs when the local user receives a message from a remote user.
   * @param peerId ID of the remote user that sends the message.
   * @param message The pointer to the message: IMessage.
   */
  onMessageReceivedFromPeer?(peerId: string, message: IMessage): void;
}

/**
 * The IRtmService class.
 */
export abstract class IRtmService {
  /**
   * Creates and gets an IRtmService instance.
   * @param appId The pointer to the app ID.
   * @param eventHandler The pointer to the IRtmServiceEventHandler object.
   * @param eventSpace The connection specific ID, used during report to argus.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract initialize(
    appId: string,
    eventHandler: IRtmServiceEventHandler
  ): number;
  /**
   * Releases the IRtmServiceEventHandler object.
   * @param eventHandler The pointer to the IRtmServiceEventHandler object.
   */
  abstract unregisterObserver(eventHandler: IRtmServiceEventHandler): void;
  /**
   * Releases the IRtmService instance.
   * @param sync Determines whether to report the result of this method call synchronously.
   * - true: Report the result of this method call after the IRtmService instance is released.
   * - false: (Default) Report the result of this method call immediately, even when the IRtmService is not
   * released.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract release(sync: boolean): number;
  /**
   * Logs in the RTM service.
   *
   * @note
   * - If you login with the same user ID from a different instance, your previous login will be kicked.
   * - The call frequency limit of this method is 2 queries per second.
   * @param token The token used to log in the RTM service.
   * @param userId ID of the user logging in the RTM service.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract login(token: string, userId: string): number;
  /**
   * Logs out of the RTM service.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract logout(): number;
  /**
   * Sends a peer message to a specified remote user.
   *
   * @param peerId The pointer to the ID of the remote user.
   * @param message The pointer to message: IMessage.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract sendMessageToPeer(peerId: string, message: IMessage): number;
  /**
   * Creates an RTM channel.
   *
   * @param channelId The unique channel name for an RTM session. Supported character scopes are:
   * - All lowercase English letters: a to z.
   * - All uppercase English letters: A to Z.
   * - All numeric characters: 0 to 9.
   * - The space character.
   * - Punctuation characters and other symbols, including: "!", "#", "$", "%", "&", "(", ")", "+", "-", ":", ";", "<", "=",
   * ".", ">", "?", "@", "[", "]", "^", "_", " {", "}", "|", "~", ","
   *
   * @param eventHandler The pointer to IChannelEventHandler.
   * @return
   * - The pointer to an IChannel instance, if the method call succeeds.
   * - An empty pointer NULL, if the method call fails.
   */
  abstract createChannel(
    channelId: string,
    eventHandler: IChannelEventHandler
  ): IChannel;
}
