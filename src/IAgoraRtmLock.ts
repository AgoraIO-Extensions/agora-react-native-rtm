import { RTM_CHANNEL_TYPE } from './AgoraRtmBase';

/// Generated by terra, DO NOT MODIFY BY HAND.

/**
 * The IRtmLock class.
 *
 * This class provides the rtm lock methods that can be invoked by your app.
 */
export abstract class IRtmLock {
  /**
   * sets a lock
   *
   * @param [in] channelName The name of the channel.
   * @param [in] channelType The type of the channel.
   * @param [in] lockName The name of the lock.
   * @param [in] ttl The lock ttl.
   * @param [out] requestId The related request id of this operation.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract setLock(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    lockName: string,
    ttl: number,
    requestId?: number
  ): number;
  /**
   * gets locks in the channel
   *
   * @param [in] channelName The name of the channel.
   * @param [in] channelType The type of the channel.
   * @param [out] requestId The related request id of this operation.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract getLocks(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    requestId?: number
  ): number;
  /**
   * removes a lock
   *
   * @param [in] channelName The name of the channel.
   * @param [in] channelType The type of the channel.
   * @param [in] lockName The name of the lock.
   * @param [out] requestId The related request id of this operation.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract removeLock(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    lockName: string,
    requestId?: number
  ): number;
  /**
   * acquires a lock
   *
   * @param [in] channelName The name of the channel.
   * @param [in] channelType The type of the channel.
   * @param [in] lockName The name of the lock.
   * @param [in] retry Whether to automatically retry when acquires lock failed
   * @param [out] requestId The related request id of this operation.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract acquireLock(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    lockName: string,
    retry: boolean,
    requestId?: number
  ): number;
  /**
   * releases a lock
   *
   * @param [in] channelName The name of the channel.
   * @param [in] channelType The type of the channel.
   * @param [in] lockName The name of the lock.
   * @param [out] requestId The related request id of this operation.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract releaseLock(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    lockName: string,
    requestId?: number
  ): number;
  /**
   * disables a lock
   *
   * @param [in] channelName The name of the channel.
   * @param [in] channelType The type of the channel.
   * @param [in] lockName The name of the lock.
   * @param [in] owner The lock owner.
   * @param [out] requestId The related request id of this operation.
   * @return
   * - 0: Success.
   * - < 0: Failure.
   */
  abstract revokeLock(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    lockName: string,
    owner: string,
    requestId?: number
  ): number;
}
