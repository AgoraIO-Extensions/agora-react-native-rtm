import { PublishOptions, UserList } from '../AgoraRtmBase';
import {
  IStreamChannel,
  JoinChannelOptions,
  JoinTopicOptions,
  TopicOptions,
} from '../IAgoraStreamChannel';
import { callIrisApi } from '../index';

/// Generated by terra, DO NOT MODIFY BY HAND.

// @ts-ignore
export class IStreamChannelImpl implements IStreamChannel {
  join(options: JoinChannelOptions, requestId: number): number {
    const apiType = this.getApiTypeFromJoin();
    const jsonParams = {
      options: options,
      requestId: requestId,
      toJSON: () => {
        return {
          options: options,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromJoin(): string {
    return 'StreamChannel_join';
  }

  renewToken(token: string): number {
    const apiType = this.getApiTypeFromRenewToken();
    const jsonParams = {
      token: token,
      toJSON: () => {
        return {
          token: token,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromRenewToken(): string {
    return 'StreamChannel_renewToken';
  }

  leave(requestId: number): number {
    const apiType = this.getApiTypeFromLeave();
    const jsonParams = {
      requestId: requestId,
      toJSON: () => {
        return {
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromLeave(): string {
    return 'StreamChannel_leave';
  }

  getChannelName(): string {
    const apiType = this.getApiTypeFromGetChannelName();
    const jsonParams = {};
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromGetChannelName(): string {
    return 'StreamChannel_getChannelName';
  }

  joinTopic(
    topic: string,
    options: JoinTopicOptions,
    requestId: number
  ): number {
    const apiType = this.getApiTypeFromJoinTopic();
    const jsonParams = {
      topic: topic,
      options: options,
      requestId: requestId,
      toJSON: () => {
        return {
          topic: topic,
          options: options,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromJoinTopic(): string {
    return 'StreamChannel_joinTopic';
  }

  publishTopicMessage(
    topic: string,
    message: string,
    length: number,
    option: PublishOptions
  ): number {
    const apiType = this.getApiTypeFromPublishTopicMessage();
    const jsonParams = {
      topic: topic,
      message: message,
      length: length,
      option: option,
      toJSON: () => {
        return {
          topic: topic,
          message: message,
          length: length,
          option: option,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromPublishTopicMessage(): string {
    return 'StreamChannel_publishTopicMessage';
  }

  leaveTopic(topic: string, requestId: number): number {
    const apiType = this.getApiTypeFromLeaveTopic();
    const jsonParams = {
      topic: topic,
      requestId: requestId,
      toJSON: () => {
        return {
          topic: topic,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromLeaveTopic(): string {
    return 'StreamChannel_leaveTopic';
  }

  subscribeTopic(
    topic: string,
    options: TopicOptions,
    requestId: number
  ): number {
    const apiType = this.getApiTypeFromSubscribeTopic();
    const jsonParams = {
      topic: topic,
      options: options,
      requestId: requestId,
      toJSON: () => {
        return {
          topic: topic,
          options: options,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromSubscribeTopic(): string {
    return 'StreamChannel_subscribeTopic';
  }

  unsubscribeTopic(topic: string, options: TopicOptions): number {
    const apiType = this.getApiTypeFromUnsubscribeTopic();
    const jsonParams = {
      topic: topic,
      options: options,
      toJSON: () => {
        return {
          topic: topic,
          options: options,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromUnsubscribeTopic(): string {
    return 'StreamChannel_unsubscribeTopic';
  }

  getSubscribedUserList(topic: string, users: UserList[]): number {
    const apiType = this.getApiTypeFromGetSubscribedUserList();
    const jsonParams = {
      topic: topic,
      users: users,
      toJSON: () => {
        return {
          topic: topic,
          users: users,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromGetSubscribedUserList(): string {
    return 'StreamChannel_getSubscribedUserList';
  }

  release(): number {
    const apiType = this.getApiTypeFromRelease();
    const jsonParams = {};
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromRelease(): string {
    return 'StreamChannel_release';
  }

  publishTopicMessageWithBuffer(
    topic: string,
    message: Uint8Array,
    length: number,
    option: PublishOptions
  ): number {
    const apiType = this.getApiTypeFromPublishTopicMessageWithBuffer();
    const jsonParams = {
      topic: topic,
      message: message,
      length: length,
      option: option,
      toJSON: () => {
        return {
          topic: topic,
          message: message,
          length: length,
          option: option,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromPublishTopicMessageWithBuffer(): string {
    return 'StreamChannel_publishTopicMessageWithBuffer';
  }
}
