import { RTM_CHANNEL_TYPE } from '../AgoraRtmBase';
import {
  IMetadata,
  IRtmStorage,
  MetadataItem,
  MetadataOptions,
} from '../IAgoraRtmStorage';
import { callIrisApi } from '../index';

/// Generated by terra, DO NOT MODIFY BY HAND.

// @ts-ignore
export class IMetadataImpl implements IMetadata {
  setMajorRevision(revision: number): void {
    const apiType = this.getApiTypeFromSetMajorRevision();
    const jsonParams = {
      revision: revision,
      toJSON: () => {
        return {
          revision: revision,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromSetMajorRevision(): string {
    return 'Metadata_setMajorRevision';
  }

  getMajorRevision(): number {
    const apiType = this.getApiTypeFromGetMajorRevision();
    const jsonParams = {};
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromGetMajorRevision(): string {
    return 'Metadata_getMajorRevision';
  }

  setMetadataItem(item: MetadataItem): void {
    const apiType = this.getApiTypeFromSetMetadataItem();
    const jsonParams = {
      item: item,
      toJSON: () => {
        return {
          item: item,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromSetMetadataItem(): string {
    return 'Metadata_setMetadataItem';
  }

  getMetadataItems(items: MetadataItem[], size: number): void {
    const apiType = this.getApiTypeFromGetMetadataItems();
    const jsonParams = {
      items: items,
      size: size,
      toJSON: () => {
        return {
          items: items,
          size: size,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromGetMetadataItems(): string {
    return 'Metadata_getMetadataItems';
  }

  clearMetadata(): void {
    const apiType = this.getApiTypeFromClearMetadata();
    const jsonParams = {};
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromClearMetadata(): string {
    return 'Metadata_clearMetadata';
  }

  release(): void {
    const apiType = this.getApiTypeFromRelease();
    const jsonParams = {};
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromRelease(): string {
    return 'Metadata_release';
  }
}

// @ts-ignore
export class IRtmStorageImpl implements IRtmStorage {
  createMetadata(): IMetadata[] {
    const apiType = this.getApiTypeFromCreateMetadata();
    const jsonParams = {};
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromCreateMetadata(): string {
    return 'RtmStorage_createMetadata';
  }

  setChannelMetadata(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    data: IMetadata[],
    options: MetadataOptions,
    lockName: string,
    requestId: number
  ): number {
    const apiType = this.getApiTypeFromSetChannelMetadata();
    const jsonParams = {
      channelName: channelName,
      channelType: channelType,
      data: data,
      options: options,
      lockName: lockName,
      requestId: requestId,
      toJSON: () => {
        return {
          channelName: channelName,
          channelType: channelType,
          data: data,
          options: options,
          lockName: lockName,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromSetChannelMetadata(): string {
    return 'RtmStorage_setChannelMetadata';
  }

  updateChannelMetadata(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    data: IMetadata[],
    options: MetadataOptions,
    lockName: string,
    requestId: number
  ): number {
    const apiType = this.getApiTypeFromUpdateChannelMetadata();
    const jsonParams = {
      channelName: channelName,
      channelType: channelType,
      data: data,
      options: options,
      lockName: lockName,
      requestId: requestId,
      toJSON: () => {
        return {
          channelName: channelName,
          channelType: channelType,
          data: data,
          options: options,
          lockName: lockName,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromUpdateChannelMetadata(): string {
    return 'RtmStorage_updateChannelMetadata';
  }

  removeChannelMetadata(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    data: IMetadata[],
    options: MetadataOptions,
    lockName: string,
    requestId: number
  ): number {
    const apiType = this.getApiTypeFromRemoveChannelMetadata();
    const jsonParams = {
      channelName: channelName,
      channelType: channelType,
      data: data,
      options: options,
      lockName: lockName,
      requestId: requestId,
      toJSON: () => {
        return {
          channelName: channelName,
          channelType: channelType,
          data: data,
          options: options,
          lockName: lockName,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromRemoveChannelMetadata(): string {
    return 'RtmStorage_removeChannelMetadata';
  }

  getChannelMetadata(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    requestId: number
  ): number {
    const apiType = this.getApiTypeFromGetChannelMetadata();
    const jsonParams = {
      channelName: channelName,
      channelType: channelType,
      requestId: requestId,
      toJSON: () => {
        return {
          channelName: channelName,
          channelType: channelType,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromGetChannelMetadata(): string {
    return 'RtmStorage_getChannelMetadata';
  }

  setUserMetadata(
    userId: string,
    data: IMetadata[],
    options: MetadataOptions,
    requestId: number
  ): number {
    const apiType = this.getApiTypeFromSetUserMetadata();
    const jsonParams = {
      userId: userId,
      data: data,
      options: options,
      requestId: requestId,
      toJSON: () => {
        return {
          userId: userId,
          data: data,
          options: options,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromSetUserMetadata(): string {
    return 'RtmStorage_setUserMetadata';
  }

  updateUserMetadata(
    userId: string,
    data: IMetadata[],
    options: MetadataOptions,
    requestId: number
  ): number {
    const apiType = this.getApiTypeFromUpdateUserMetadata();
    const jsonParams = {
      userId: userId,
      data: data,
      options: options,
      requestId: requestId,
      toJSON: () => {
        return {
          userId: userId,
          data: data,
          options: options,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromUpdateUserMetadata(): string {
    return 'RtmStorage_updateUserMetadata';
  }

  removeUserMetadata(
    userId: string,
    data: IMetadata[],
    options: MetadataOptions,
    requestId: number
  ): number {
    const apiType = this.getApiTypeFromRemoveUserMetadata();
    const jsonParams = {
      userId: userId,
      data: data,
      options: options,
      requestId: requestId,
      toJSON: () => {
        return {
          userId: userId,
          data: data,
          options: options,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromRemoveUserMetadata(): string {
    return 'RtmStorage_removeUserMetadata';
  }

  getUserMetadata(userId: string, requestId: number): number {
    const apiType = this.getApiTypeFromGetUserMetadata();
    const jsonParams = {
      userId: userId,
      requestId: requestId,
      toJSON: () => {
        return {
          userId: userId,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromGetUserMetadata(): string {
    return 'RtmStorage_getUserMetadata';
  }

  subscribeUserMetadata(userId: string, requestId: number): number {
    const apiType = this.getApiTypeFromSubscribeUserMetadata();
    const jsonParams = {
      userId: userId,
      requestId: requestId,
      toJSON: () => {
        return {
          userId: userId,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromSubscribeUserMetadata(): string {
    return 'RtmStorage_subscribeUserMetadata';
  }

  unsubscribeUserMetadata(userId: string): number {
    const apiType = this.getApiTypeFromUnsubscribeUserMetadata();
    const jsonParams = {
      userId: userId,
      toJSON: () => {
        return {
          userId: userId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromUnsubscribeUserMetadata(): string {
    return 'RtmStorage_unsubscribeUserMetadata';
  }
}
