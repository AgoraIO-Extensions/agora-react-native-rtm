import {
  GetOnlineUsersOptions,
  PresenceOptions,
  RTM_CHANNEL_TYPE,
  StateItem,
} from '../AgoraRtmBase';
import { IRtmPresence } from '../IAgoraRtmPresence';
import { callIrisApi } from '../index';

/// Generated by terra, DO NOT MODIFY BY HAND.

// @ts-ignore
export class IRtmPresenceImpl implements IRtmPresence {
  whoNow(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    options: PresenceOptions,
    requestId?: number
  ): number {
    const apiType = this.getApiTypeFromWhoNow();
    const jsonParams = {
      channelName: channelName,
      channelType: channelType,
      options: options,
      requestId: requestId,
      toJSON: () => {
        return {
          channelName: channelName,
          channelType: channelType,
          options: options,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromWhoNow(): string {
    return 'RtmPresence_whoNow';
  }

  whereNow(userId: string, requestId?: number): number {
    const apiType = this.getApiTypeFromWhereNow();
    const jsonParams = {
      userId: userId,
      requestId: requestId,
      toJSON: () => {
        return {
          userId: userId,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromWhereNow(): string {
    return 'RtmPresence_whereNow';
  }

  setState(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    items: StateItem[],
    count: number,
    requestId?: number
  ): number {
    const apiType = this.getApiTypeFromSetState();
    const jsonParams = {
      channelName: channelName,
      channelType: channelType,
      items: items,
      count: count,
      requestId: requestId,
      toJSON: () => {
        return {
          channelName: channelName,
          channelType: channelType,
          items: items,
          count: count,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromSetState(): string {
    return 'RtmPresence_setState';
  }

  removeState(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    keys: string[],
    count: number,
    requestId?: number
  ): number {
    const apiType = this.getApiTypeFromRemoveState();
    const jsonParams = {
      channelName: channelName,
      channelType: channelType,
      keys: keys,
      count: count,
      requestId: requestId,
      toJSON: () => {
        return {
          channelName: channelName,
          channelType: channelType,
          keys: keys,
          count: count,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromRemoveState(): string {
    return 'RtmPresence_removeState';
  }

  getState(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    userId: string,
    requestId?: number
  ): number {
    const apiType = this.getApiTypeFromGetState();
    const jsonParams = {
      channelName: channelName,
      channelType: channelType,
      userId: userId,
      requestId: requestId,
      toJSON: () => {
        return {
          channelName: channelName,
          channelType: channelType,
          userId: userId,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromGetState(): string {
    return 'RtmPresence_getState';
  }

  getOnlineUsers(
    channelName: string,
    channelType: RTM_CHANNEL_TYPE,
    options: GetOnlineUsersOptions,
    requestId?: number
  ): number {
    const apiType = this.getApiTypeFromGetOnlineUsers();
    const jsonParams = {
      channelName: channelName,
      channelType: channelType,
      options: options,
      requestId: requestId,
      toJSON: () => {
        return {
          channelName: channelName,
          channelType: channelType,
          options: options,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromGetOnlineUsers(): string {
    return 'RtmPresence_getOnlineUsers';
  }

  getUserChannels(userId: string, requestId?: number): number {
    const apiType = this.getApiTypeFromGetUserChannels();
    const jsonParams = {
      userId: userId,
      requestId: requestId,
      toJSON: () => {
        return {
          userId: userId,
          requestId: requestId,
        };
      },
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }

  protected getApiTypeFromGetUserChannels(): string {
    return 'RtmPresence_getUserChannels';
  }
}
