/// Generated by terra, DO NOT MODIFY BY HAND.

/**
 * IP areas.
 */
export enum RTM_AREA_CODE {
  RTM_AREA_CODE_CN = 1,
  RTM_AREA_CODE_NA = 2,
  RTM_AREA_CODE_EU = 4,
  RTM_AREA_CODE_AS = 8,
  RTM_AREA_CODE_JP = 16,
  RTM_AREA_CODE_IN = 32,
  RTM_AREA_CODE_GLOB = 4294967295,
}

/**
 * The log level for rtm sdk.
 */
export enum RTM_LOG_LEVEL {
  RTM_LOG_LEVEL_NONE = 0,
  RTM_LOG_LEVEL_INFO = 1,
  RTM_LOG_LEVEL_WARN = 2,
  RTM_LOG_LEVEL_ERROR = 4,
  RTM_LOG_LEVEL_FATAL = 8,
}

/**
 * The encryption mode.
 */
export enum RTM_ENCRYPTION_MODE {
  RTM_ENCRYPTION_MODE_NONE = 0,
  RTM_ENCRYPTION_MODE_AES_128_GCM = 1,
  RTM_ENCRYPTION_MODE_AES_256_GCM = 2,
}

/**
 * The error codes of rtm client.
 */
export enum RTM_ERROR_CODE {
  RTM_ERROR_OK = 0,
  RTM_ERROR_NOT_INITIALIZED = -10001,
  RTM_ERROR_NOT_LOGIN = -10002,
  RTM_ERROR_INVALID_APP_ID = -10003,
  RTM_ERROR_INVALID_EVENT_HANDLER = -10004,
  RTM_ERROR_INVALID_TOKEN = -10005,
  RTM_ERROR_INVALID_USER_ID = -10006,
  RTM_ERROR_INIT_SERVICE_FAILED = -10007,
  RTM_ERROR_INVALID_CHANNEL_NAME = -10008,
  RTM_ERROR_TOKEN_EXPIRED = -10009,
  RTM_ERROR_LOGIN_NO_SERVER_RESOURCES = -10010,
  RTM_ERROR_LOGIN_TIMEOUT = -10011,
  RTM_ERROR_LOGIN_REJECTED = -10012,
  RTM_ERROR_LOGIN_ABORTED = -10013,
  RTM_ERROR_INVALID_PARAMETER = -10014,
  RTM_ERROR_LOGIN_NOT_AUTHORIZED = -10015,
  RTM_ERROR_INCONSISTENT_APPID = -10016,
  RTM_ERROR_DUPLICATE_OPERATION = -10017,
  RTM_ERROR_INSTANCE_ALREADY_RELEASED = -10018,
  RTM_ERROR_INVALID_CHANNEL_TYPE = -10019,
  RTM_ERROR_INVALID_ENCRYPTION_PARAMETER = -10020,
  RTM_ERROR_OPERATION_RATE_EXCEED_LIMITATION = -10021,
  RTM_ERROR_CHANNEL_NOT_JOINED = -11001,
  RTM_ERROR_CHANNEL_NOT_SUBSCRIBED = -11002,
  RTM_ERROR_CHANNEL_EXCEED_TOPIC_USER_LIMITATION = -11003,
  RTM_ERROR_CHANNEL_IN_REUSE = -11004,
  RTM_ERROR_CHANNEL_INSTANCE_EXCEED_LIMITATION = -11005,
  RTM_ERROR_CHANNEL_IN_ERROR_STATE = -11006,
  RTM_ERROR_CHANNEL_JOIN_FAILED = -11007,
  RTM_ERROR_CHANNEL_INVALID_TOPIC_NAME = -11008,
  RTM_ERROR_CHANNEL_INVALID_MESSAGE = -11009,
  RTM_ERROR_CHANNEL_MESSAGE_LENGTH_EXCEED_LIMITATION = -11010,
  RTM_ERROR_CHANNEL_INVALID_USER_LIST = -11011,
  RTM_ERROR_CHANNEL_NOT_AVAILABLE = -11012,
  RTM_ERROR_CHANNEL_TOPIC_NOT_SUBSCRIBED = -11013,
  RTM_ERROR_CHANNEL_EXCEED_TOPIC_LIMITATION = -11014,
  RTM_ERROR_CHANNEL_JOIN_TOPIC_FAILED = -11015,
  RTM_ERROR_CHANNEL_TOPIC_NOT_JOINED = -11016,
  RTM_ERROR_CHANNEL_TOPIC_NOT_EXIST = -11017,
  RTM_ERROR_CHANNEL_INVALID_TOPIC_META = -11018,
  RTM_ERROR_CHANNEL_SUBSCRIBE_TIMEOUT = -11019,
  RTM_ERROR_CHANNEL_SUBSCRIBE_TOO_FREQUENT = -11020,
  RTM_ERROR_CHANNEL_SUBSCRIBE_FAILED = -11021,
  RTM_ERROR_CHANNEL_UNSUBSCRIBE_FAILED = -11022,
  RTM_ERROR_CHANNEL_ENCRYPT_MESSAGE_FAILED = -11023,
  RTM_ERROR_CHANNEL_PUBLISH_MESSAGE_FAILED = -11024,
  RTM_ERROR_CHANNEL_PUBLISH_MESSAGE_TOO_FREQUENT = -11025,
  RTM_ERROR_CHANNEL_PUBLISH_MESSAGE_TIMEOUT = -11026,
  RTM_ERROR_CHANNEL_NOT_CONNECTED = -11027,
  RTM_ERROR_CHANNEL_LEAVE_FAILED = -11028,
  RTM_ERROR_CHANNEL_CUSTOM_TYPE_LENGTH_OVERFLOW = -11029,
  RTM_ERROR_CHANNEL_INVALID_CUSTOM_TYPE = -11030,
  RTM_ERROR_CHANNEL_UNSUPPORTED_MESSAGE_TYPE = -11031,
  RTM_ERROR_CHANNEL_PRESENCE_NOT_READY = -11032,
  RTM_ERROR_STORAGE_OPERATION_FAILED = -12001,
  RTM_ERROR_STORAGE_METADATA_ITEM_EXCEED_LIMITATION = -12002,
  RTM_ERROR_STORAGE_INVALID_METADATA_ITEM = -12003,
  RTM_ERROR_STORAGE_INVALID_ARGUMENT = -12004,
  RTM_ERROR_STORAGE_INVALID_REVISION = -12005,
  RTM_ERROR_STORAGE_METADATA_LENGTH_OVERFLOW = -12006,
  RTM_ERROR_STORAGE_INVALID_LOCK_NAME = -12007,
  RTM_ERROR_STORAGE_LOCK_NOT_ACQUIRED = -12008,
  RTM_ERROR_STORAGE_INVALID_KEY = -12009,
  RTM_ERROR_STORAGE_INVALID_VALUE = -12010,
  RTM_ERROR_STORAGE_KEY_LENGTH_OVERFLOW = -12011,
  RTM_ERROR_STORAGE_VALUE_LENGTH_OVERFLOW = -12012,
  RTM_ERROR_STORAGE_DUPLICATE_KEY = -12013,
  RTM_ERROR_STORAGE_OUTDATED_REVISION = -12014,
  RTM_ERROR_STORAGE_NOT_SUBSCRIBE = -12015,
  RTM_ERROR_STORAGE_INVALID_METADATA_INSTANCE = -12016,
  RTM_ERROR_STORAGE_SUBSCRIBE_USER_EXCEED_LIMITATION = -12017,
  RTM_ERROR_STORAGE_OPERATION_TIMEOUT = -12018,
  RTM_ERROR_STORAGE_NOT_AVAILABLE = -12019,
  RTM_ERROR_PRESENCE_NOT_CONNECTED = -13001,
  RTM_ERROR_PRESENCE_NOT_WRITABLE = -13002,
  RTM_ERROR_PRESENCE_INVALID_ARGUMENT = -13003,
  RTM_ERROR_PRESENCE_CACHED_TOO_MANY_STATES = -13004,
  RTM_ERROR_PRESENCE_STATE_COUNT_OVERFLOW = -13005,
  RTM_ERROR_PRESENCE_INVALID_STATE_KEY = -13006,
  RTM_ERROR_PRESENCE_INVALID_STATE_VALUE = -13007,
  RTM_ERROR_PRESENCE_STATE_KEY_SIZE_OVERFLOW = -13008,
  RTM_ERROR_PRESENCE_STATE_VALUE_SIZE_OVERFLOW = -13009,
  RTM_ERROR_PRESENCE_STATE_DUPLICATE_KEY = -13010,
  RTM_ERROR_PRESENCE_USER_NOT_EXIST = -13011,
  RTM_ERROR_PRESENCE_OPERATION_TIMEOUT = -13012,
  RTM_ERROR_PRESENCE_OPERATION_FAILED = -13013,
  RTM_ERROR_LOCK_OPERATION_FAILED = -14001,
  RTM_ERROR_LOCK_OPERATION_TIMEOUT = -14002,
  RTM_ERROR_LOCK_OPERATION_PERFORMING = -14003,
  RTM_ERROR_LOCK_ALREADY_EXIST = -14004,
  RTM_ERROR_LOCK_INVALID_NAME = -14005,
  RTM_ERROR_LOCK_NOT_ACQUIRED = -14006,
  RTM_ERROR_LOCK_ACQUIRE_FAILED = -14007,
  RTM_ERROR_LOCK_NOT_EXIST = -14008,
  RTM_ERROR_LOCK_NOT_AVAILABLE = -14009,
}

/**
 * Connection states between rtm sdk and agora server.
 */
export enum RTM_CONNECTION_STATE {
  RTM_CONNECTION_STATE_DISCONNECTED = 1,
  RTM_CONNECTION_STATE_CONNECTING = 2,
  RTM_CONNECTION_STATE_CONNECTED = 3,
  RTM_CONNECTION_STATE_RECONNECTING = 4,
  RTM_CONNECTION_STATE_FAILED = 5,
}

/**
 * Reasons for connection state change.
 */
export enum RTM_CONNECTION_CHANGE_REASON {
  RTM_CONNECTION_CHANGED_CONNECTING = 0,
  RTM_CONNECTION_CHANGED_JOIN_SUCCESS = 1,
  RTM_CONNECTION_CHANGED_INTERRUPTED = 2,
  RTM_CONNECTION_CHANGED_BANNED_BY_SERVER = 3,
  RTM_CONNECTION_CHANGED_JOIN_FAILED = 4,
  RTM_CONNECTION_CHANGED_LEAVE_CHANNEL = 5,
  RTM_CONNECTION_CHANGED_INVALID_APP_ID = 6,
  RTM_CONNECTION_CHANGED_INVALID_CHANNEL_NAME = 7,
  RTM_CONNECTION_CHANGED_INVALID_TOKEN = 8,
  RTM_CONNECTION_CHANGED_TOKEN_EXPIRED = 9,
  RTM_CONNECTION_CHANGED_REJECTED_BY_SERVER = 10,
  RTM_CONNECTION_CHANGED_SETTING_PROXY_SERVER = 11,
  RTM_CONNECTION_CHANGED_RENEW_TOKEN = 12,
  RTM_CONNECTION_CHANGED_CLIENT_IP_ADDRESS_CHANGED = 13,
  RTM_CONNECTION_CHANGED_KEEP_ALIVE_TIMEOUT = 14,
  RTM_CONNECTION_CHANGED_REJOIN_SUCCESS = 15,
  RTM_CONNECTION_CHANGED_LOST = 16,
  RTM_CONNECTION_CHANGED_ECHO_TEST = 17,
  RTM_CONNECTION_CHANGED_CLIENT_IP_ADDRESS_CHANGED_BY_USER = 18,
  RTM_CONNECTION_CHANGED_SAME_UID_LOGIN = 19,
  RTM_CONNECTION_CHANGED_TOO_MANY_BROADCASTERS = 20,
  RTM_CONNECTION_CHANGED_LICENSE_VALIDATION_FAILURE = 21,
  RTM_CONNECTION_CHANGED_STREAM_CHANNEL_NOT_AVAILABLE = 22,
  RTM_CONNECTION_CHANGED_INCONSISTENT_APPID = 23,
  RTM_CONNECTION_CHANGED_LOGIN_SUCCESS = 10001,
  RTM_CONNECTION_CHANGED_LOGOUT = 10002,
  RTM_CONNECTION_CHANGED_PRESENCE_NOT_READY = 10003,
}

/**
 * RTM channel type.
 */
export enum RTM_CHANNEL_TYPE {
  RTM_CHANNEL_TYPE_NONE = 0,
  RTM_CHANNEL_TYPE_MESSAGE = 1,
  RTM_CHANNEL_TYPE_STREAM = 2,
}

/**
 * @brief Message type when user publish message to channel or topic
 */
export enum RTM_MESSAGE_TYPE {
  RTM_MESSAGE_TYPE_BINARY = 0,
  RTM_MESSAGE_TYPE_STRING = 1,
}

/**
 * @brief Storage type indicate the storage event was triggered by user or channel
 */
export enum RTM_STORAGE_TYPE {
  RTM_STORAGE_TYPE_NONE = 0,
  RTM_STORAGE_TYPE_USER = 1,
  RTM_STORAGE_TYPE_CHANNEL = 2,
}

/**
 * The storage event type, indicate storage operation
 */
export enum RTM_STORAGE_EVENT_TYPE {
  RTM_STORAGE_EVENT_TYPE_NONE = 0,
  RTM_STORAGE_EVENT_TYPE_SNAPSHOT = 1,
  RTM_STORAGE_EVENT_TYPE_SET = 2,
  RTM_STORAGE_EVENT_TYPE_UPDATE = 3,
  RTM_STORAGE_EVENT_TYPE_REMOVE = 4,
}

/**
 * The lock event type, indicate lock operation
 */
export enum RTM_LOCK_EVENT_TYPE {
  RTM_LOCK_EVENT_TYPE_NONE = 0,
  RTM_LOCK_EVENT_TYPE_SNAPSHOT = 1,
  RTM_LOCK_EVENT_TYPE_LOCK_SET = 2,
  RTM_LOCK_EVENT_TYPE_LOCK_REMOVED = 3,
  RTM_LOCK_EVENT_TYPE_LOCK_ACQUIRED = 4,
  RTM_LOCK_EVENT_TYPE_LOCK_RELEASED = 5,
  RTM_LOCK_EVENT_TYPE_LOCK_EXPIRED = 6,
}

/**
 * The proxy type
 */
export enum RTM_PROXY_TYPE {
  RTM_PROXY_TYPE_NONE = 0,
  RTM_PROXY_TYPE_HTTP = 1,
}

/**
 * @brief Topic event type
 */
export enum RTM_TOPIC_EVENT_TYPE {
  RTM_TOPIC_EVENT_TYPE_NONE = 0,
  RTM_TOPIC_EVENT_TYPE_SNAPSHOT = 1,
  RTM_TOPIC_EVENT_TYPE_REMOTE_JOIN_TOPIC = 2,
  RTM_TOPIC_EVENT_TYPE_REMOTE_LEAVE_TOPIC = 3,
}

/**
 * @brief Presence event type
 */
export enum RTM_PRESENCE_EVENT_TYPE {
  RTM_PRESENCE_EVENT_TYPE_NONE = 0,
  RTM_PRESENCE_EVENT_TYPE_SNAPSHOT = 1,
  RTM_PRESENCE_EVENT_TYPE_INTERVAL = 2,
  RTM_PRESENCE_EVENT_TYPE_REMOTE_JOIN_CHANNEL = 3,
  RTM_PRESENCE_EVENT_TYPE_REMOTE_LEAVE_CHANNEL = 4,
  RTM_PRESENCE_EVENT_TYPE_REMOTE_TIMEOUT = 5,
  RTM_PRESENCE_EVENT_TYPE_REMOTE_STATE_CHANGED = 6,
  RTM_PRESENCE_EVENT_TYPE_ERROR_OUT_OF_SERVICE = 7,
}

/**
 * Definition of LogConfiguration
 */
export class RtmLogConfig {
  filePath?: string;
  fileSizeInKB?: number;
  level?: RTM_LOG_LEVEL;
}

/**
 * User list.
 */
export class UserList {
  users?: string[];
  userCount?: number;
}

/**
 * @brief Topic publisher information
 */
export class PublisherInfo {
  publisherUserId?: string;
  publisherMeta?: string;
}

/**
 * @brief Topic information
 */
export class TopicInfo {
  topic?: string;
  publishers?: PublisherInfo[];
  publisherCount?: number;
}

/**
 * @brief User state property
 */
export class StateItem {
  key?: string;
  value?: string;
}

/**
 *  The information of a Lock.
 */
export class LockDetail {
  lockName?: string;
  owner?: string;
  ttl?: number;
}

/**
 *  The states of user.
 */
export class UserState {
  userId?: string;
  states?: StateItem[];
  statesCount?: number;
}

/**
 *  The subscribe option.
 */
export class SubscribeOptions {
  withMessage?: boolean;
  withMetadata?: boolean;
  withPresence?: boolean;
  withLock?: boolean;
}

/**
 *  The channel information.
 */
export class ChannelInfo {
  channelName?: string;
  channelType?: RTM_CHANNEL_TYPE;
}

/**
 *  The option to query user presence.
 */
export class PresenceOptions {
  includeUserId?: boolean;
  includeState?: boolean;
  page?: string;
}

/**
 *  The option to query user presence.
 */
export class GetOnlineUsersOptions {
  includeUserId?: boolean;
  includeState?: boolean;
  page?: string;
}

/**
 * @brief Publish message option
 */
export class PublishOptions {
  type?: RTM_MESSAGE_TYPE;
  sendTs?: number;
  customType?: string;
}

/**
 * @brief Proxy configuration
 */
export class RtmProxyConfig {
  proxyType?: RTM_PROXY_TYPE;
  server?: string;
  port?: number;
  account?: string;
  password?: string;
}

/**
 * @brief encryption configuration
 */
export class RtmEncryptionConfig {
  encryptionMode?: RTM_ENCRYPTION_MODE;
  encryptionKey?: string;
  encryptionSalt?: number;
}
